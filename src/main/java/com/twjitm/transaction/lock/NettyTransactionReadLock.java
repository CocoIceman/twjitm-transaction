package com.twjitm.transaction.lock;import com.twjitm.transaction.service.redis.NettyTransactionRedisService;import com.twjitm.transaction.transaction.enums.NettyTransactionEntityCause;import com.twjitm.transaction.transaction.enums.NettyTransactionLockStateEnum;import com.twjitm.transaction.transaction.exception.NettyTransactionException;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * netty 游戏事物锁，基于redis实现的分布式游戏事务锁 * <pre> *     读锁 * </pre> * * @author twjitm - [Created on 2018-08-27 12:14] * @company https://github.com/twjitm * @jdk java version "1.8.0_77" */public class NettyTransactionReadLock implements NettyTransactionLockInterface {    private Logger logger = LoggerFactory.getLogger(NettyTransactionReadLock.class);    /**     * 事物锁key     */    private String lockKey;    /**     * 锁提供的redis     */    private NettyTransactionRedisService redisService;    /**     * 事物锁参数原因     */    private NettyTransactionEntityCause cause;    /**     * 分布式读锁状态     */    private NettyTransactionLockStateEnum lockState;    /**     * 分布式读锁内容     */    private String lockContext;    public NettyTransactionReadLock(String lockKey, NettyTransactionRedisService redisService, NettyTransactionEntityCause cause) {        super();        this.lockKey = lockKey;        this.redisService = redisService;        this.cause = cause;        this.lockState = NettyTransactionLockStateEnum.INIT;    }    /**     * 注销一个锁     */    @Override    public void destroy() {        if (this.lockState == NettyTransactionLockStateEnum.INIT || this.lockState == NettyTransactionLockStateEnum.CREATE) {            return;        }        boolean exists = redisService.exists(getLockKey(lockKey, cause));        if (exists && !StringUtils.isEmpty(lockContext)) {            exists = this.checkLockContext();            if (exists) {                redisService.deleteKey(getLockKey(lockKey, cause));            }        }    }    @Override    public boolean create(long seconds) throws NettyTransactionException {        this.lockState = NettyTransactionLockStateEnum.CREATE;        //检测值是否存在        boolean exists = redisService.exists(getLockKey(lockKey, cause));        //检测内容是否为空        if (exists && !StringUtils.isEmpty(lockContext)) {            exists = this.checkLockContext();        }        return exists;    }    private boolean checkLockContext() {        boolean checkFlag = false;        String realLockKey = getLockKey(lockKey, cause);        String content = redisService.getString(realLockKey);        if (!StringUtils.isEmpty(content)) {            logger.info("read content realLockKey:" + realLockKey);            checkFlag = content.equals(this.lockContext);        }        return checkFlag;    }    /**     * 获取锁可以     *     * @param lockKey     * @param cause     * @return     */    public String getLockKey(String lockKey, NettyTransactionEntityCause cause) {        return lockKey + "#" + cause.getCause();    }    @Override    public String getInfo() {        return this.lockKey + this.cause + this.lockContext;    }    @Override    public void setContent(String lockContent) {        this.lockContext = lockContent;    }}