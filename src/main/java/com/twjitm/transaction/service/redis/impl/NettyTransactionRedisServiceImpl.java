package com.twjitm.transaction.service.redis.impl;import com.twjitm.transaction.service.redis.NettyTransactionRedisService;import com.twjitm.transaction.utils.TimeUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import java.util.Date;/** * 采用Redis 实现分布式锁，单机模式redis * * @author EGLS0807 - [Created on 2018-08-27 11:57] * @company http://www.g2us.com/ * @jdk java version "1.8.0_77" */public class NettyTransactionRedisServiceImpl implements NettyTransactionRedisService {    protected static Logger logger = LoggerFactory.getLogger(NettyTransactionRedisServiceImpl.class);    /**     * 数据源     */    private JedisPool jedisPool;    /**     * 设置连接池     */    public void setJedisPool(JedisPool jedisPool) {        this.jedisPool = jedisPool;    }    /**     * 正常返还链接     */    private void returnResource(Jedis jedis) {        try {            jedisPool.returnResource(jedis);        } catch (Exception e) {            logger.error(e.toString(), e);        }    }    /*     * 释放错误链接     */    private void returnBrokenResource(Jedis jedis, String name, Exception exception) {        logger.error(TimeUtil.getDateString(new Date()) + ":::::" + name);        if (jedis != null) {            try {                jedisPool.returnBrokenResource(jedis);            } catch (Exception e) {                logger.error(e.toString(), e);            }        }        if (exception != null) {            logger.error(exception.toString(), exception);        }    }    /**     * 释放成功链接     *     * @param success     * @param jedis     */    private void releaseRedisSource(boolean success, Jedis jedis) {        if (success && jedis != null) {            returnResource(jedis);        }    }    /**     * 释放非正常链接     *     * @param jedis     * @param key     * @param string     * @param e     */    private void releaseBrokenRedisSource(Jedis jedis, String key, String string, Exception e, boolean deleteKeyFlag) {        returnBrokenResource(jedis, string, e);        if (deleteKeyFlag) {            expire(key, 0);        }    }    /**     * 设置缓存生命周期     *     * @param key     * @param seconds     */    @Override    public void expire(String key, int seconds) {        Jedis jedis = null;        boolean successful = true;        try {            jedis = jedisPool.getResource();            jedis.expire(key, seconds);        } catch (Exception e) {            successful = false;            logger.error("设置生命周期发生异常", e.getCause());            returnBrokenResource(jedis, "expire:" + key, e);        } finally {            if (successful && jedis != null) {                returnResource(jedis);            }        }    }    /**     * 删除key     *     * @param key     */    @Override    public boolean deleteKey(String key) {        Jedis jedis = null;        boolean successful = true;        try {            jedis = jedisPool.getResource();            jedis.del(key);        } catch (Exception e) {            successful = false;            releaseBrokenRedisSource(jedis, key, "deleteKey", e, false);        } finally {            releaseRedisSource(successful, jedis);        }        return successful;    }    /**     * 设置     *     * @param key     * @param value     * @return     */    @Override    public boolean setNxString(String key, String value, int seconds) throws Exception {        Jedis jedis = null;        boolean successful = true;        boolean result;        try {            jedis = jedisPool.getResource();            result = (jedis.setnx(key, value) != 0);            if (seconds > -1) {                jedis.expire(key, seconds);            }        } catch (Exception e) {            successful = false;            releaseBrokenRedisSource(jedis, key, "setNxString", e, false);            throw e;        } finally {            releaseRedisSource(successful, jedis);        }        return result;    }    /**     * 设置     *     * @param key     * @param value     * @return     */    @Override    public boolean setHnxString(String key, String field, String value) throws Exception {        Jedis jedis = null;        boolean success = true;        boolean result;        try {            jedis = jedisPool.getResource();            result = (jedis.hsetnx(key, field, value) != 0);        } catch (Exception e) {            success = false;            releaseBrokenRedisSource(jedis, key, "setHnxString", e, false);            throw e;        } finally {            releaseRedisSource(success, jedis);        }        return result;    }    @Override    public void setString(String key, String value) {        setString(key, value, -1);    }    @Override    public void setString(String key, String value, int seconds) {        Jedis jedis = null;        boolean successful = true;        try {            jedis = jedisPool.getResource();            jedis.set(key, value);            if (seconds > -1) {                jedis.expire(key, seconds);            }        } catch (Exception e) {            logger.info("执行setString异常" + key, value, e.getCause());            successful = false;            returnBrokenResource(jedis, "setString", e);            expire(key, 0);        } finally {            if (successful && jedis != null) {                returnResource(jedis);            }        }    }    @Override    public String getString(String key) {        return getString(key, -1);    }    @Override    public String getString(String key, int seconds) {        Jedis jedis = null;        boolean successful = true;        String rt = null;        try {            jedis = jedisPool.getResource();            rt = jedis.get(key);            if (seconds > -1) {                jedis.expire(key, seconds);            }        } catch (Exception e) {            logger.info("执行getString异常" + key, e.getCause());            successful = false;            returnBrokenResource(jedis, "getString", e);        } finally {            if (successful && jedis != null) {                returnResource(jedis);            }        }        return rt;    }    @Override    public boolean exists(String key) {        Jedis jedis = null;        boolean successful = true;        try {            jedis = jedisPool.getResource();            return jedis.exists(key);        } catch (Exception e) {            successful = false;            logger.error("查找键是否存在发生异常" + key, e.getCause());            returnBrokenResource(jedis, "exists:" + key, e);        } finally {            if (successful && jedis != null) {                returnResource(jedis);            }        }        return false;    }}