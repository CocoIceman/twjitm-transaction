package com.twjitm.transaction.service.transaction;import com.twjitm.transaction.transaction.NettyTransaction;import com.twjitm.transaction.transaction.entity.AbstractNettyTransactionEntity;import com.twjitm.transaction.transaction.entity.AbstractNettyTransactionZkEntity;import com.twjitm.transaction.transaction.entity.NettyTransactionEntityInterface;import com.twjitm.transaction.transaction.enums.NettyTransactionCause;import com.twjitm.transaction.transaction.enums.NettyTransactionCommitResult;import com.twjitm.transaction.transaction.exception.NettyTransactionException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Service;/** * 事物提交服务 * * @author twjitm - [Created on 2018-08-27 15:44] * @company https://github.com/twjitm * @jdk java version "1.8.0_77" */@Servicepublic class NettyTransactionServiceImpl implements NettyTransactionService {    private Logger logger = LoggerFactory.getLogger(NettyTransactionServiceImpl.class);    @Override    public NettyTransactionCommitResult commitTransaction(NettyTransactionCause transactionCause, AbstractNettyTransactionEntity... abstractGameTransactionEntity) {        NettyTransaction transaction = new NettyTransaction(transactionCause);        return commitTransaction(transaction, abstractGameTransactionEntity);    }    @Override    public NettyTransactionCommitResult commitTransaction(NettyTransactionCause gameTransactionCause, long waitTime, AbstractNettyTransactionEntity... abstractGameTransactionEntity) {        NettyTransaction transaction = new NettyTransaction(gameTransactionCause, waitTime);        return commitTransaction(transaction, abstractGameTransactionEntity);    }    @Override    public NettyTransactionCommitResult commitTransaction(NettyTransactionCause cause, AbstractNettyTransactionZkEntity... abstractNettyTransactionZkEntities) {        NettyTransaction transaction = new NettyTransaction(cause);        return commitTransaction(transaction, abstractNettyTransactionZkEntities);    }    /**     * 二阶段和三阶段的区别     * http://www.hollischuang.com/archives/681     *     * @param transaction                     事务     * @param abstractGameTransactionEntities 事务实体集和     * @return 事务执行返回结果     */    private NettyTransactionCommitResult commitTransaction(NettyTransaction transaction, NettyTransactionEntityInterface... abstractGameTransactionEntities) {        NettyTransactionCommitResult tryCommitResult = NettyTransactionCommitResult.SUCCESS;        for (NettyTransactionEntityInterface entityInterface : abstractGameTransactionEntities) {            transaction.addEntity(entityInterface);        }        try {            //如果能够创建分布式服务器锁            if (transaction.createNettyTransactionLock()) {                logger.info("成功获得锁: " + transaction.toString());                logger.info("尝试提交锁: " + transaction.toString());                transaction.tryCommit();                if (transaction.canCommit()) {                    logger.info("正式提交锁: " + transaction.toString());                    transaction.commit();                    logger.info("提交锁成功: " + transaction.toString());                } else {                    logger.info("重复提交锁: " + transaction.toString());                    tryCommitResult = transaction.getTransactionTryCommitResult();                    logger.info("重复提交锁失败: " + transaction.toString());                }            } else {                logger.info("获得锁失败: " + transaction.toString());                tryCommitResult = NettyTransactionCommitResult.LOCK_ERROR;            }        } catch (Exception e) {            logger.info("提交锁发生异常: " + transaction.toString());            try {                logger.info("开始回滚锁: " + transaction.toString());                transaction.rollback();                logger.info("回滚锁成功: " + transaction.toString());            } catch (NettyTransactionException e1) {                e1.printStackTrace();                logger.info("回滚锁发生异常: " + transaction.toString());            }            //异常事务原因            tryCommitResult = NettyTransactionCommitResult.COMMON_ERROR;            if (e instanceof NettyTransactionException) {                NettyTransactionException exception = (NettyTransactionException) e;                NettyTransactionCommitResult tempGameTransactionTryCommitResult =                        exception.getResult();                if (tempGameTransactionTryCommitResult != null) {                    tryCommitResult = tempGameTransactionTryCommitResult;                }            }        } finally {            //释放锁            logger.info("释放锁开始: " + transaction.toString());            transaction.releaseNettyTransactionLock();            logger.info("释放锁成功: " + transaction.toString());        }        return tryCommitResult;    }}