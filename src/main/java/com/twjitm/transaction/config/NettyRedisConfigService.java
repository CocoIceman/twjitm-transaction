package com.twjitm.transaction.config;import com.twjitm.transaction.utils.JdomUtils;import org.jdom2.DataConversionException;import org.jdom2.Element;import org.springframework.stereotype.Service;import redis.clients.jedis.JedisPool;import redis.clients.jedis.JedisPoolConfig;/** * redis config setting * * @author twjitm - [Created on 2018-08-27 16:41] * @company https://github.com/twjitm * @jdk java version "1.8.0_77" */@Servicepublic class NettyRedisConfigService {    public JedisPoolConfig initRedisPoolConfig() throws DataConversionException {        Element element = JdomUtils.getRootElementByStream(GlobalConstants.RedisConfigFile.REDIS_POOL_CONIFG);        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();        int maxIdle = element.getAttribute("maxIdle").getIntValue();        boolean testWhileIdle = element.getAttribute("testWhileIdle").getBooleanValue();        int timeBetweenEvictionRunsMillis = element.getAttribute("timeBetweenEvictionRunsMillis").getIntValue();        int numTestsPerEvictionRun = element.getAttribute("numTestsPerEvictionRun").getIntValue();        int minEvictableIdleTimeMillis = element.getAttribute("minEvictableIdleTimeMillis").getIntValue();        jedisPoolConfig.setTestWhileIdle(testWhileIdle);        jedisPoolConfig.setMaxIdle(maxIdle);        jedisPoolConfig.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);        jedisPoolConfig.setNumTestsPerEvictionRun(numTestsPerEvictionRun);        jedisPoolConfig.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);        initRedis(jedisPoolConfig);        return jedisPoolConfig;    }    public JedisPool initRedis(JedisPoolConfig jedisPoolConfig) throws DataConversionException {        Element element = JdomUtils.getRootElementByStream(GlobalConstants.RedisConfigFile.REDIS);        String host = element.getAttribute("host").getValue();        int port = element.getAttribute("port").getIntValue();        boolean hasPassword = element.getAttribute("password") != null;        int database = element.getAttribute("database").getIntValue();        JedisPool jedisPool = new JedisPool(jedisPoolConfig, host, port);        if (hasPassword) {            int timeout = element.getAttribute("timeout").getIntValue();            String password = element.getAttribute("password").getValue();            jedisPool = new JedisPool(jedisPoolConfig, host, port, timeout, password, database);        }        return jedisPool;    }}